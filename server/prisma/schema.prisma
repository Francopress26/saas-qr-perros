// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Mascota {
  id        Int      @id @default(autoincrement())
  nombre    String?   
  datos_extra     String?
  zona     String?
  contacto String?
  active Boolean?
  email_contacto String?
  imageURL String?
  codigoQR String?   @unique
  user    User? @relation(fields:[userId],references:[id])
  userId  String?
}
model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(uuid())
  name          String?
  password      String 
  roles         String[] @default(["user"])
  isActive       Boolean @default(true)
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  mascotas     Mascota[]
 subscription Subscription ?
  @@map("users")
}
 
model VerificationToken {
  identifier String @unique
  token      String
  expires    DateTime
 
  @@id([identifier])
}
model Plan {
  id String @unique
  collector_id String
  application_id String
  reason String
  status String
  date_created String
  frequency  String
  frequency_type String
  transaction_amount Decimal
  currency_id String
  billing_day Int

}
model Subscription {
  id String @id @default(uuid())
  subscription_id String @unique
  payer_id String?
  payer_email String?
  status String
  reason String 
  preaproval_plan_id String
  start_date String 
  next_payment_date String
  user User @relation(fields: [userId], references: [id])
  userId String  @unique
}